package com.example.web_organic.rest;

import com.example.web_organic.entity.Order;
import com.example.web_organic.entity.Transaction;
import com.example.web_organic.modal.Enum.Payment_Status_Enum;
import com.example.web_organic.repository.CartItemRepository;
import com.example.web_organic.repository.OrderRepository;
import com.example.web_organic.repository.TransactionRepository;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Map;
import java.util.Optional;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@RestController
@RequestMapping("/api/webhook")
@RequiredArgsConstructor
public class SePayWebhookApi {
    @Autowired
    private OrderRepository orderRepository;
    @Autowired
    private TransactionRepository transactionRepository;
    @Autowired
    private CartItemRepository cartItemRepository;
    @Transactional
    @PostMapping("/sepay")
    public ResponseEntity<?> handleSePayWebhook(@RequestBody Map<String, String> payload) {
        System.out.println("üîπ Nh·∫≠n Webhook t·ª´ SePay: " + payload);

        // Ki·ªÉm tra n·∫øu payload r·ªóng
        if (payload == null || payload.isEmpty()) {
            System.out.println("‚ö† Webhook nh·∫≠n ƒë∆∞·ª£c nh∆∞ng payload r·ªóng!");
            return ResponseEntity.badRequest().body("‚ö† Webhook nh·∫≠n ƒë∆∞·ª£c nh∆∞ng payload r·ªóng!");
        }

        try {
            String referenceNumber = payload.get("referenceCode");
            String transactionContent = payload.get("content");
            String transferType = payload.get("transferType");
            String amountString = payload.get("transferAmount");
            String transactionDateString = payload.get("transactionDate");

            // Ki·ªÉm tra n·∫øu thi·∫øu d·ªØ li·ªáu quan tr·ªçng
            if (transactionContent == null || amountString == null || transactionDateString == null) {
                System.out.println("‚ö† Webhook thi·∫øu th√¥ng tin quan tr·ªçng!");
                return ResponseEntity.badRequest().body("‚ö† Webhook thi·∫øu th√¥ng tin quan tr·ªçng!");
            }

            // Chuy·ªÉn ƒë·ªïi gi√° tr·ªã amount
            BigDecimal amount;
            try {
                amount = new BigDecimal(amountString);
            } catch (NumberFormatException e) {
                System.out.println("‚ö† L·ªói parse transferAmount: " + e.getMessage());
                return ResponseEntity.badRequest().body("‚ö† L·ªói parse transferAmount");
            }

            // Chuy·ªÉn ƒë·ªïi gi√° tr·ªã transactionDate
            LocalDateTime transactionDate;
            try {
                transactionDate = LocalDateTime.parse(transactionDateString.replace(" ", "T"));
            } catch (Exception e) {
                System.out.println("‚ö† L·ªói parse transactionDate: " + e.getMessage());
                return ResponseEntity.badRequest().body("‚ö† L·ªói parse transactionDate");
            }

            // L·∫•y Order ID t·ª´ n·ªôi dung giao d·ªãch
            String orderId = extractOrderId(transactionContent);
            if (orderId == null) {
                System.out.println("‚ö† Kh√¥ng t√¨m th·∫•y Order ID trong n·ªôi dung giao d·ªãch!");
                return ResponseEntity.badRequest().body("‚ö† Kh√¥ng t√¨m th·∫•y Order ID");
            }

            System.out.println("üîπ Order ID sau khi chu·∫©n h√≥a: " + orderId);

            Optional<Order> optionalOrder = orderRepository.findOrderById(orderId);
            if (optionalOrder.isEmpty()) {
                System.out.println("‚ö† Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng trong database!");
                return ResponseEntity.badRequest().body("‚ö† Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng");
            }

            Order order = optionalOrder.get();

            if (order.getTotal().compareTo(amount) != 0) {
                System.out.println("‚ö† S·ªë ti·ªÅn kh√¥ng kh·ªõp! ƒê∆°n h√†ng: " + order.getTotal() + ", Webhook: " + amount);
                return ResponseEntity.badRequest().body("‚ö† S·ªë ti·ªÅn kh√¥ng kh·ªõp v·ªõi ƒë∆°n h√†ng! ƒê∆°n h√†ng: " + order.getTotal() + ", Webhook: " + amount);
            }

            // L∆∞u giao d·ªãch v√†o b·∫£ng transactions
            Transaction transaction = Transaction.builder()
                .gateway("SePay")
                .transactionDate(transactionDate)
                .referenceNumber(referenceNumber)
                .amountIn(amount)
                .accountNumber("96247VYDE5")
                .createdAt(LocalDateTime.now())
                .order(order)
                .build();
            transactionRepository.save(transaction);
            System.out.println("‚úÖ L∆∞u transaction th√†nh c√¥ng!");

            // C·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n
            if ("in".equalsIgnoreCase(transferType)) {
                order.setPaymentStatus(Payment_Status_Enum.PAID);
                orderRepository.save(order);
                cartItemRepository.deleteByUser(order.getUser());
                System.out.println("‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i PAID th√†nh c√¥ng cho order: " + order.getId());
            }

            return ResponseEntity.ok("‚úÖ Giao d·ªãch ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng!");
        } catch (Exception e) {
            System.out.println("‚ö† L·ªói x·ª≠ l√Ω webhook: " + e.getMessage());
            return ResponseEntity.badRequest().body("‚ö† L·ªói x·ª≠ l√Ω webhook: " + e.getMessage());
        }
    }




    private String extractOrderId(String content) {
        if (content == null || content.isEmpty()) {
            System.out.println("‚ö† N·ªôi dung giao d·ªãch tr·ªëng!");
            return null;
        }

        // Ch·∫•p nh·∫≠n c·∫£ hai d·∫°ng `ORD-YYYYMMDD-XXXXXX` v√† `ORDYYYYMMDDXXXXXX`
        Pattern pattern = Pattern.compile("(ORD-?\\d{8}-?[A-Z0-9]+)");
        Matcher matcher = pattern.matcher(content);

        if (matcher.find()) {
            String rawOrderId = matcher.group(1);

            // N·∫øu Order ID kh√¥ng c√≥ d·∫•u `-`, th√™m v√†o
            if (!rawOrderId.contains("-")) {
                rawOrderId = rawOrderId.replaceFirst("ORD(\\d{8})([A-Z0-9]+)", "ORD-$1-$2");
            }

            System.out.println("üîπ Order ID sau khi chu·∫©n h√≥a: " + rawOrderId);
            return rawOrderId;
        }

        System.out.println("‚ö† Kh√¥ng t√¨m th·∫•y Order ID trong n·ªôi dung giao d·ªãch!");
        return null;
    }


}

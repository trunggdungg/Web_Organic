const productVariantListEl = document.getElementById('product-variant-list');

const renderProductVariantList = (allProducts, variantsByProductId) => {
    let html = "";
    allProducts.forEach(product => {
        html += `
            <tr class="product-row" data-product-id="${product.id}">
                <td class="align-middle">
                    <button class="btn btn-sm btn-link toggle-variants" onclick="toggleVariants(this)">
                        <i class="fas fa-chevron-right"></i>
                    </button>
                </td>
                <td class="align-middle">
                    <img src="${product.imageUrl}" alt="S·∫£n ph·∫©m" class="product-image" style="width: 110px;height: 110px">
                </td>
                <td class="align-middle">${product.name.length > 25 ? product.name.substring(0, 25) + '...' : product.name}</td>
                <td class="align-middle">${product.category.name}</td>
                <td class="align-middle">
                    <span class="badge bg-primary">
                        ${variantsByProductId[product.id] ? variantsByProductId[product.id].length + ' bi·∫øn th·ªÉ' : '0 bi·∫øn th·ªÉ'}
                    </span>
                </td>
                
            </tr>
        `;

        if (variantsByProductId[product.id]) {
            html += `
                <tr class="variants-row" style="display: none;">
                    <td colspan="6" class="p-0">
                        <div class="variants-container bg-light p-3">
                            <table class="table mb-0">
                                <thead>
                                    <tr>
                                        <th>Gi√°</th>
                                        <th>S·ªë l∆∞·ª£ng</th>
                                        <th>Tr·ªçng l∆∞·ª£ng</th>
                                        <th>M·∫∑c ƒë·ªãnh</th>
                                        <th>Thao t√°c</th>
                                    </tr>
                                </thead>
                                <tbody>
            `;

            variantsByProductId[product.id].forEach(variant => {
                html += `
                    <tr>
                      <td> ${formatCurrency(variant.price)}ƒë</td>
                        <td>${variant.stock}</td>
                        <td>${variant.weight}</td>
                        <td>
                            <span class="variant-badge ${variant.isDefault ? 'status-active' : 'status-inactive'}">
                                ${variant.isDefault ? 'M·∫∑c ƒë·ªãnh' : 'Kh√¥ng'}
                            </span>
                        </td>
                        <td>
                            <div class="d-flex gap-2">
                                <button class="btn btn-sm btn-info" onclick="openModalUpdateVariant(${variant.id})" title="S·ª≠a">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button class="btn btn-sm btn-danger" onclick="deleteVariant(${variant.id})" title="X√≥a">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                `;
            });

            html += `
                                </tbody>
                            </table>
                        </div>
                    </td>
                </tr>
            `;
        }
    });

    productVariantListEl.innerHTML = html;
};

const btnAddVariantEl = document.getElementById('btn-add-variant');
const variantModalLabelEl = document.getElementById('variantModalLabel');
const productSelectEL = document.getElementById('productSelect');
const priceVariantEl = document.getElementById('variantPrice');
const quantityVariantEl = document.getElementById('variantQuantity');
const weightVariantEl = document.getElementById('variantWeight');
const defaultVariantEl = document.getElementById('variantDefault');
const submitFormVariantEl = document.getElementById('btn-submit-variant');

const modalVariantObj = new bootstrap.Modal(document.getElementById('variantModal'), {
    keyboard: false
});
let idUpdateVariant = null;

btnAddVariantEl.addEventListener('click', () => {
    variantModalLabelEl.innerText = "Th√™m bi·∫øn th·ªÉ m·ªõi";
    priceVariantEl.value = "";
    quantityVariantEl.value = "";
    weightVariantEl.value = "";
    defaultVariantEl.checked = false;
    idUpdateVariant = null;
});

const openModalUpdateVariant = (id) => {
    idUpdateVariant = id;
    // T√¨m ki·∫øm variant trong t·∫•t c·∫£ c√°c s·∫£n ph·∫©m
    let variant = null;
    for (const productId in variantsByProductId) {
        variant = variantsByProductId[productId].find(v => v.id === id);
        if (variant) break;
    }

    if (!variant) {
        console.error("Kh√¥ng t√¨m th·∫•y bi·∫øn th·ªÉ v·ªõi ID:", id);
        return;
    }
    console.log("variant",variant);
    priceVariantEl.value =formatCurrency(variant.price) ;
    quantityVariantEl.value = variant.stock;
    weightVariantEl.value = variant.weight;
    defaultVariantEl.checked = variant.isDefault;
    variantModalLabelEl.innerText = "C·∫≠p nh·∫≠t bi·∫øn th·ªÉ";
    modalVariantObj.show();
    idUpdateVariant = id;
};

submitFormVariantEl.addEventListener('click', async (e) => {
    e.preventDefault();
    if (idUpdateVariant) {
        updateVariant();
    } else {
        createVariant();
    }
});

const createVariant = async (productId) => {
   if (productSelectEL.value === "") {
       alertWarning("Vui l√≤ng ch·ªçn s·∫£n ph·∫©m");
       return;
    }
    if (priceVariantEl.value.trim() === "") {
        alertWarning("Vui l√≤ng nh·∫≠p gi√°");
        return;
    }
    if (quantityVariantEl.value.trim() === "") {
        alertWarning("Vui l√≤ng nh·∫≠p s·ªë l∆∞·ª£ng");
        return;
    }
    if (weightVariantEl.value.trim() === "") {
        alertWarning("Vui l√≤ng nh·∫≠p tr·ªçng l∆∞·ª£ng");
        return;
    }

    const request = {
        productId:parseInt(productSelectEL.value),
        price: priceVariantEl.value.replaceAll(',', ''),
        stock:parseInt(quantityVariantEl.value),
        weight: weightVariantEl.value,
        isDefault: defaultVariantEl.checked
    }

    console.log("request",request);

    try {
        const response = await axios.post('/api/admin/product-variant/create', request);
        console.log("Response t·ª´ API:", response.data);

        if (response.status === 200) {
            alertSuccess("T·∫°o bi·∫øn th·ªÉ th√†nh c√¥ng");
            modalVariantObj.hide();

            const productId =parseInt(response.data.product.id); // Tr√°nh l·ªói undefined
            console.log("Product ID c·ªßa bi·∫øn th·ªÉ:", productId);

            if (!variantsByProductId[productId]) {
                variantsByProductId[productId] = [];
            }
            variantsByProductId[productId].push(response.data);

            console.log("C·∫≠p nh·∫≠t danh s√°ch bi·∫øn th·ªÉ:", variantsByProductId);

            // üî• Fetch l·∫°i danh s√°ch s·∫£n ph·∫©m n·∫øu c·∫ßn
            const productIndex = allProducts.content.findIndex(p => p.id === productId);
            if (productIndex === -1) {
                console.error("L·ªói: Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID:", productId);
                return;
            }

            renderProductVariantList(allProducts.content, variantsByProductId);
        }
    } catch (error) {
        console.error("L·ªói khi t·∫°o bi·∫øn th·ªÉ:", error);
    }

}

const updateVariant = async () => {
    if (priceVariantEl.value.trim() === "") {
        alertWarning("Vui l√≤ng nh·∫≠p gi√°");
        return;
    }
    if (quantityVariantEl.value.trim() === "") {
        alertWarning("Vui l√≤ng nh·∫≠p s·ªë l∆∞·ª£ng");
        return;
    }
    if (weightVariantEl.value.trim() === "") {
        alertWarning("Vui l√≤ng nh·∫≠p tr·ªçng l∆∞·ª£ng");
        return;
    }

    // T√¨m productId c·ªßa variant hi·ªán t·∫°i
    let currentProductId = null;
    for (const productId in variantsByProductId) {
        const variant = variantsByProductId[productId].find(v => v.id === idUpdateVariant);
        if (variant) {
            currentProductId = parseInt(productId);
            break;
        }
    }

    if (!currentProductId) {
        alertWarning("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m c·ªßa bi·∫øn th·ªÉ");
        return;
    }

    const request = {
        productId: currentProductId, // S·ª≠ d·ª•ng productId ƒë∆∞·ª£c t√¨m th·∫•y
        price: priceVariantEl.value.replaceAll(',', ''),
        stock: parseInt(quantityVariantEl.value),
        weight: weightVariantEl.value,
        isDefault: defaultVariantEl.checked
    }

    console.log("request", request);
    try {
        const response = await axios.put(`/api/admin/product-variant/${idUpdateVariant}/update`, request);
        console.log("K·∫øt qu·∫£ response:", response);
        if (response.status === 200) {
            alertSuccess("C·∫≠p nh·∫≠t bi·∫øn th·ªÉ th√†nh c√¥ng");

            const productId = response.data.product.id;
            console.log("Product ID c·ªßa bi·∫øn th·ªÉ:", productId);

            const productIndex = allProducts.content.findIndex(p => p.id === productId);
            if (productIndex === -1) {
                console.error("L·ªói: Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID:", productId);
                return;
            }

            const variantIndex = variantsByProductId[productId].findIndex(v => v.id === idUpdateVariant);
            if (variantIndex === -1) {
                console.error("L·ªói: Kh√¥ng t√¨m th·∫•y bi·∫øn th·ªÉ v·ªõi ID:", idUpdateVariant);
                return;
            }

            // C·∫≠p nh·∫≠t bi·∫øn th·ªÉ trong m·∫£ng
            variantsByProductId[productId][variantIndex] = response.data;
            renderProductVariantList(allProducts.content, variantsByProductId);
            modalVariantObj.hide();
        }
    } catch (error) {
        console.error("L·ªói khi c·∫≠p nh·∫≠t bi·∫øn th·ªÉ:", error);
        // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói chi ti·∫øt n·∫øu c√≥
        if (error.response && error.response.data) {
            alertWarning(error.response.data.message || "C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t bi·∫øn th·ªÉ");
        } else {
            alertWarning("C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t bi·∫øn th·ªÉ");
        }
    }
}

const deleteVariant = async (variantId) => {
    // T√¨m productId c·ªßa variant
    let productId = null;
    let variantToDelete = null;

    for (const pId in variantsByProductId) {
        const variant = variantsByProductId[pId].find(v => v.id === variantId);
        if (variant) {
            productId = pId;
            variantToDelete = variant;
            break;
        }
    }

    if (!productId || !variantToDelete) {
        alertWarning("Kh√¥ng t√¨m th·∫•y bi·∫øn th·ªÉ");
        return;
    }

    // Ki·ªÉm tra s·ªë l∆∞·ª£ng bi·∫øn th·ªÉ
    const productVariants = variantsByProductId[productId];
    if (productVariants.length <= 1) {
        alertWarning("Kh√¥ng th·ªÉ x√≥a. S·∫£n ph·∫©m ph·∫£i c√≥ √≠t nh·∫•t m·ªôt bi·∫øn th·ªÉ.");
        return;
    }

    alertConfirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a bi·∫øn th·ªÉ n√†y?", async () => {
        try {
            console.log("ƒêang x√≥a bi·∫øn th·ªÉ c√≥ ID:", variantId);
            console.log("Thu·ªôc s·∫£n ph·∫©m c√≥ ID:", productId);

            const response = await axios.delete(`/api/admin/product-variant/${variantId}/delete`);

            if (response.status === 200) {
                alertSuccess("X√≥a bi·∫øn th·ªÉ th√†nh c√¥ng");

                // X√≥a bi·∫øn th·ªÉ kh·ªèi danh s√°ch
                variantsByProductId[productId] = variantsByProductId[productId].filter(v => v.id !== variantId);

                // C·∫≠p nh·∫≠t l·∫°i giao di·ªán
                renderProductVariantList(allProducts.content, variantsByProductId);
            }
        } catch (error) {
            console.error("Chi ti·∫øt l·ªói khi x√≥a bi·∫øn th·ªÉ:", {
                status: error.response?.status,
                data: error.response?.data,
                message: error.message,
                config: error.config
            });

            const errorMessage = error.response?.data?.message
                || error.response?.data?.error
                || "C√≥ l·ªói x·∫£y ra khi x√≥a bi·∫øn th·ªÉ";

            alertWarning(errorMessage);
        }
    });
}

function formatCurrency(value) {
    if (!value) return "0"; // Tr√°nh l·ªói n·∫øu price b·ªã null ho·∫∑c undefined
    let intPrice = Math.round(value); // Chuy·ªÉn v·ªÅ s·ªë nguy√™n (b·ªè ph·∫ßn th·∫≠p ph√¢n)
    return intPrice.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
}

renderProductVariantList(allProducts.content, variantsByProductId);